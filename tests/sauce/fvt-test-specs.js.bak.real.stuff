var webdriver = require('selenium-webdriver'),
    assert = require('assert');
    test = require('../../node_modules/selenium-webdriver/testing');
    SauceLabs = require('saucelabs');
    
var sauce = 'http://ondemand.saucelabs.com:80/wd/hub';
var sauce = 'http://localhost:5555/wd/hub';
var http = require('https');

//test.describe('fvt-test1', function() {
//  var browser;
//  var allPassed = true;
//
//  test.before(function() {
//    browser = new webdriver.Builder().
//        usingServer(sauce).
//        forBrowser('firefox').
////        withCapabilities({
////        browserName: 'Firefox',
////        platform: 'Windows XP',
////        name: 'Report page title check',
////        tags: ["demo","ibm","devops"],
////        build: '1.1.0',
////        username: process.env.SAUCE_USERNAME,
////        accessKey: process.env.SAUCE_ACCESS_KEY
////    }).
//        build();
//  });
//
//  test.it("check report title: <project_name> - <report name>", function(done) {
//	  var in_url = process.env.REPORT_URL;
//		var x = in_url.split("=");
//		var x1 = x[1].split("&");
//		var x2 = x1[0].split("_");
//      browser.get(in_url);
//            var flow = webdriver.promise.controlFlow();
//                flow.execute(function () { return webdriver.promise.delayed(3 * 1000); });
//        browser.getTitle('value').then(function(title) {
//             assert.equal(title, x2[1]+' - Deployment Risk Analytics Decision Report');
//            });
//        done();
//    });
//
//  test.afterEach(function(done) {   
//           if(this.currentTest.state === 'passed')  
//             allPassed = true;
//            else
//             allPassed = false;
//            done();
//    });
//
//  test.after(function(done) {
//    browser.getSession().then(function(session){
//            var sauceAccount = new SauceLabs({
//                username: process.env.SAUCE_USERNAME,
//                password: process.env.SAUCE_ACCESS_KEY
//            });
//            sauceAccount.updateJob(session.getId(), {passed:allPassed}, function(){});
//            browser.quit();
//            done();
//    });
//   
//  });
//});
































var browser;
var allPassed;

test.before(function() {
    browser = new webdriver.Builder().
        usingServer(sauce).
        forBrowser('firefox').
//        withCapabilities({
//            browserName: 'Firefox',
//            platform: 'Windows XP',
//            name: 'Rule result check',
//            tags: ["demo","ibm","devops"],
//            build: '1.1.0',
//            username: process.env.SAUCE_USERNAME,
//            accessKey: process.env.SAUCE_ACCESS_KEY
//        }).
        build();
    
    var in_url = process.env.REPORT_URL;
    browser.get(in_url);
    
    var flow = webdriver.promise.controlFlow();

    flow.execute(function () { 
        return webdriver.promise.delayed(3 * 1000); 
    });
});

test.after(function(done) {
    browser.getSession().then(function(session){
        var sauceAccount = new SauceLabs({
            username: process.env.SAUCE_USERNAME,
            password: process.env.SAUCE_ACCESS_KEY
        });

        sauceAccount.updateJob(session.getId(), {passed:allPassed}, function(){});
        browser.quit();
        done();
    });
});









test.describe( 'Basic Report Type', function() {
    
    allPassed = true;

    test.it( "Check if outcome and one simple conditon display", function(done) {

        browser.findElement( webdriver.By.className( 'rightBlock,block' ) ).then( function( elem ){
            //console.log( elem );
            
            elem.findElements( webdriver.By.xpath( '*' ) ).then( function( elem ){
                //console.log( elem.length );
                
//                elem[ 0 ].getInnerHtml().then( function( html ) {
//                    console.log( html );
//                });
                
                elem[ 0 ].findElements( webdriver.By.xpath( './/div[contains(@class, "testCaseRow")]/div' ) ).then( function( elem ){
                    //console.log( elem.length ); 
                    
                    elem[ 0 ].getText().then( function( txt ) {
                        var string = "Success - advisory"
                        //console.log( txt );
                        assert( txt == string, "txt should equal '" + string + "'" )
                    });
                    
                    elem[ 1 ].getText().then( function( txt ) {
                        var string = "oooo"
                        //console.log( txt );
                        assert( txt == "eventType = testComplete", "txt should equal 'eventType = testComplete'" )
                    });
                });
            });
        });
        
        
        done();
    });

    test.afterEach(function(done) {   
        if(this.currentTest.state === 'passed')  
            allPassed = true;
        else
            allPassed = false;
        done();
    });
});


test.describe( 'Basic Graph for UTSuccess/TestResult Report Type', function() {
    
    allPassed = true;

    test.it( "Check if outcome displays, TestSuccess title displays, and expected/actual bar graphs display", function(done) {

        // Click leftBlock rule
        browser.findElement( webdriver.By.xpath( './/div[contains(@class,"leftBlock")]/div[4]' ) ).click().then( function(){
            browser.findElement( webdriver.By.xpath( './/div[contains(@class,"rightBlock")]/child::div[4]' ) ).then( function( elem ){
                // Find outcome
                elem.findElements( webdriver.By.xpath( './/descendant::div[contains(@class, "testCaseRow")]/div' ) ).then( function( elem ){

                    // Result
                    elem[ 0 ].getText().then( function( txt ) {
                        //console.log( txt );
                        assert( txt == "Success", "Outcome Result should equal 'Success'" );
                    });

                });

                elem.findElements( webdriver.By.xpath( './/descendant::div[contains(@class, "coverageRow")]/div' ) ).then( function( elem ){
                    
                    // Check title for UTSuccess
                    elem[ 0 ].getText().then( function( txt ) {
                        //console.log( txt );
                        assert( txt == "Test Success Percentage:", "txt should equal 'Test Success Percentage:'" );
                    });
                    
                    // Check value on "expected" bar graph
                    elem[ 1 ].getInnerHtml().then( function( html ){
                        var expected = 100;
                        
                        //console.log( html );
                        
                        assert( ( html.split( expected ).length - 1 ) >= 2, 'Expected value/bar width should be "' + expected + '"' );
                    });
                    
                    // Check value on "actual" bar graph
                    elem[ 2 ].getInnerHtml().then( function( html ){
                        var actual = 100;
                        
                        //console.log( html );
                        
                        assert( ( html.split( actual ).length - 1 ) >= 2, 'Actual value/bar width should be "' + actual + '"' );
                    });
                    
                });
            });                                                                                           
        });
        
        
        done();
    });

    test.afterEach(function(done) {   
        if(this.currentTest.state === 'passed')  
            allPassed = true;
        else
            allPassed = false;
        done();
    });


});


test.describe( 'Basic Graph for CoverageResult Report Type', function() {
    
    allPassed = true;

    test.it( "Check if outcome displays, CoverageResult title displays, and expected/actual bar graphs display", function(done) {

        // Click leftBlock rule
        browser.findElement( webdriver.By.xpath( './/div[contains(@class,"leftBlock")]/div[3]' ) ).click().then( function(){
            browser.findElement( webdriver.By.xpath( './/div[contains(@class,"rightBlock")]/child::div[3]' ) ).then( function( elem ){
                // Find outcome
                elem.findElements( webdriver.By.xpath( './/descendant::div[contains(@class, "testCaseRow")]/div' ) ).then( function( elem ){

                    // Result
                    elem[ 0 ].getText().then( function( txt ) {
                        //console.log( txt );
                        assert( txt == "Success", "Outcome Result should equal 'Success'" );
                    });

                });

                elem.findElements( webdriver.By.xpath( './/descendant::div[contains(@class, "coverageRow")]/div' ) ).then( function( elem ){

                    // Check title for UTSuccess
                    elem[ 0 ].getText().then( function( txt ) {
                        //console.log( txt );
                        assert( txt == "Coverage for total.lines.pct", "txt should equal 'Coverage for total.lines.pct'" );
                    });
                    
                    // Check value on "expected" bar graph
                    elem[ 1 ].getInnerHtml().then( function( html ){
                        var expected = 40;
                        
                        //console.log( html );
                        
                        assert( ( html.split( expected ).length - 1 ) >= 2, 'Expected value/bar width should be "' + expected + '"' );
                    });
                    
                    // Check value on "actual" bar graph
                    elem[ 2 ].getInnerHtml().then( function( html ){
                        var actual = 80.62;
                        
                        //console.log( html );
                        
                        assert( ( html.split( actual ).length - 1 ) >= 2, 'Actual value/bar width should be "' + actual + '"' );
                    });
                    
                    
                    
                    // Check title for UTSuccess
                    elem[ 3 ].getText().then( function( txt ) {
                        //console.log( txt );
                        assert( txt == "Coverage for (routes/criteria.js).lines.pct", "txt should equal 'Coverage for (routes/criteria.js).lines.pct'" );
                    });
                    
                    // Check value on "expected" bar graph
                    elem[ 4 ].getInnerHtml().then( function( html ){
                        var expected = 40;
                        
                        //console.log( html );
                        
                        assert( ( html.split( expected ).length - 1 ) >= 2, 'Expected value/bar width should be "' + expected + '"' );
                    });
                    
                    // Check value on "actual" bar graph
                    elem[ 5 ].getInnerHtml().then( function( html ){
                        var actual = 92.35;
                        
                        //console.log( html );
                        
                        assert( ( html.split( actual ).length - 1 ) >= 2, 'Actual value/bar width should be "' + actual + '"' );
                    });
                    
                });
            });                                                                                           
        });
        
        
        done();
    });

    test.afterEach(function(done) {   
        if(this.currentTest.state === 'passed')  
            allPassed = true;
        else
            allPassed = false;
        done();
    });


});


test.describe( 'Basic List for UTRegression/TestRegression Report Type', function() {
    
    allPassed = true;

    test.it( "Check if outcome displays, TestSuccess title displays, and expected/actual bar graphs display", function(done) {

        // Click leftBlock rule
        browser.findElement( webdriver.By.xpath( './/div[contains(@class,"leftBlock")]/div[3]' ) ).click().then( function(){
            browser.findElement( webdriver.By.xpath( './/div[contains(@class,"rightBlock")]/child::div[3]' ) ).then( function( elem ){
                // Find outcome
                elem.findElements( webdriver.By.xpath( './/descendant::div[contains(@class, "testCaseRow")]/div' ) ).then( function( elem ){

                    // Result
                    elem[ 0 ].getText().then( function( txt ) {
                        //console.log( txt );
                        assert( txt == "Failed", "Outcome Result should equal 'Failed'" );
                    });

                });

                elem.findElements( webdriver.By.xpath( './/descendant::div[contains(@class, "coverageRow")]/div' ) ).then( function( elem ){
                    
                    // Check title for UTSuccess
                    elem[ 0 ].getText().then( function( txt ) {
                        //console.log( txt );
                        assert( txt == "Test Success Percentage:", "txt should equal 'Test Success Percentage:'" );
                    });
                    
                    // Check value on "expected" bar graph
                    elem[ 1 ].getInnerHtml().then( function( html ){
                        var expected = 100;
                        
                        //console.log( html );
                        
                        assert( ( html.split( expected ).length - 1 ) >= 2, 'Expected value/bar width should be "' + expected + '"' );
                    });
                    
                    // Check value on "actual" bar graph
                    elem[ 2 ].getInnerHtml().then( function( html ){
                        var actual = 100;
                        
                        //console.log( html );
                        
                        assert( ( html.split( actual ).length - 1 ) >= 2, 'Actual value/bar width should be "' + actual + '"' );
                    });
                    
                });
            });                                                                                           
        });
        
        
        done();
    });

    test.afterEach(function(done) {   
        if(this.currentTest.state === 'passed')  
            allPassed = true;
        else
            allPassed = false;
        done();
    });


});